enum wisdom_WebPlayer {
  "wisdom::Human",
  "wisdom::ChessEngine"
};

enum wisdom_WebColor {
  "wisdom::NoColor",
  "wisdom::White",
  "wisdom::Black",
};

enum wisdom_WebPiece {
  "wisdom::NoPiece",
  "wisdom::Pawn",
  "wisdom::Knight",
  "wisdom::Bishop",
  "wisdom::Rook",
  "wisdom::Queen",
  "wisdom::King"
};

enum wisdom_WebGameStatus {
    "wisdom::Playing",
    "wisdom::Checkmate",
    "wisdom::Stalemate",
    "wisdom::ThreefoldRepetitionReached",
    "wisdom::ThreefoldRepetitionAccepted",
    "wisdom::FivefoldRepetitionDraw",
    "wisdom::FiftyMovesWithoutProgressReached",
    "wisdom::FiftyMovesWithoutProgressAccepted",
    "wisdom::SeventyFiveMovesWithoutProgressDraw",
    "wisdom::InsufficientMaterialDraw",
};

[Prefix="wisdom::"]
interface WebColoredPiece {
    void WebColoredPiece(long id, long color, long piece, long row, long col);
    attribute long id;
    attribute long color;
    attribute long piece;
    attribute long row;
    attribute long col;
};

[Prefix="wisdom::"]
interface WebColoredPieceList {
    void WebColoredPieceList();
    [Value] attribute WebColoredPiece[] pieces;
    [Value] WebColoredPiece pieceAt(long index);
    attribute long length;
};

[Prefix="wisdom::"]
interface WebCoord {
    void WebCoord (long row, long col);
    attribute long row;
    attribute long col;
    static WebCoord fromTextCoord(DOMString coord);
};

[Prefix="wisdom::"]
interface WebGame {
    void WebGame (long white_player, long black_player);

    [Ref] WebColoredPieceList getPieceList ();

    boolean needsPawnPromotion([Const] WebCoord src, [Const] WebCoord dst);
    boolean makeMove ([Const] WebCoord src, [Const] WebCoord dst);

    attribute boolean inCheck;
    attribute DOMString moveStatus;
    attribute DOMString gameOverStatus;

    wisdom_WebColor getCurrentTurn();
    void setMaxDepth (long max_depth);
    long getMaxDepth ();
    void startWorker ();
};
