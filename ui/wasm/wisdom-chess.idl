enum wisdom_WebPlayer {
  "wisdom::Human",
  "wisdom::ChessEngine"
};

enum wisdom_WebColor {
  "wisdom::NoColor",
  "wisdom::White",
  "wisdom::Black",
};

enum wisdom_WebPiece {
  "wisdom::NoPiece",
  "wisdom::Pawn",
  "wisdom::Knight",
  "wisdom::Bishop",
  "wisdom::Rook",
  "wisdom::Queen",
  "wisdom::King"
};

enum wisdom_WebGameStatus {
    "wisdom::Playing",
    "wisdom::Checkmate",
    "wisdom::Stalemate",
    "wisdom::ThreefoldRepetitionReached",
    "wisdom::ThreefoldRepetitionAccepted",
    "wisdom::FivefoldRepetitionDraw",
    "wisdom::FiftyMovesWithoutProgressReached",
    "wisdom::FiftyMovesWithoutProgressAccepted",
    "wisdom::SeventyFiveMovesWithoutProgressDraw",
    "wisdom::InsufficientMaterialDraw",
};

[Prefix="wisdom::"]
interface WebColoredPiece {
    void WebColoredPiece (long id, long color, long piece, long row, long col);
    attribute long id;
    attribute long color;
    attribute long piece;
    attribute long row;
    attribute long col;
};

[Prefix="wisdom::"]
interface WebColoredPieceList {
    void WebColoredPieceList();
    [Value] attribute WebColoredPiece[] pieces;
    [Value] WebColoredPiece pieceAt (long index);
    attribute long length;
};

[Prefix="wisdom::"]
interface WebCoord {
    void WebCoord (long row, long col);
    attribute long row;
    attribute long col;
    static WebCoord fromTextCoord (DOMString coord);
};

[Prefix="wisdom::"]
interface WebMove {
    static WebMove fromString (DOMString moveText, long who);
    DOMString asString();
};

[Prefix="wisdom::"]
interface GameSettings {
    void GameSettings ();
    void GameSettings (long whitePlayer, long blackPlayer, long thinkingTime, long searchDepth);
    attribute wisdom_WebPlayer whitePlayer;
    attribute wisdom_WebPlayer blackPlayer;
    attribute long thinkingTime;
    attribute long searchDepth;
};

enum wisdom_WebDrawStatus {
    "wisdom::NotReached",
    "wisdom::Proposed",
    "wisdom::Accepted",
    "wisdom::Declined"
};

[Prefix="wisdom::"]
interface WebGame {
    [Ref] WebColoredPieceList getPieceList();

    boolean needsPawnPromotion ([Const] WebCoord src, [Const] WebCoord dst);

    WebMove createMoveFromCoordinatesAndPromotedPiece(
        [Const] WebCoord src, [Const] WebCoord dst, long pieceType
    );

    boolean isLegalMove ([Const] WebMove move);
    boolean makeMove ([Const] WebMove move);

    void setSettings([Const, Ref] GameSettings newSettings);

    attribute boolean inCheck;
    [Const] DOMString getMoveStatus();
    [Const] DOMString getGameOverStatus();
    attribute long moveNumber;
    attribute long gameId;

    wisdom_WebColor getCurrentTurn();
    wisdom_WebGameStatus getGameStatus();
};

[Prefix="wisdom::"]
interface GameModel {
    void GameModel();

    void sendPause();
    void sendUnpause();

    // Notify the chess engine about a human move.
    void notifyHumanMove ([Const] WebMove move);
    void notifyComputerMove();

    WebGame startNewGame();

    GameSettings getCurrentGameSettings();
    void setCurrentGameSettings (GameSettings newSettings);
};

